


ARM Macro Assembler    Page 1 


    1 00000000         ;*------------------------------------------------------
                       ----------------------
    2 00000000         ;* Name:    Lab_1_program.s 
    3 00000000         ;* Purpose: This code flashes one LED at approximately 1
                        Hz frequency 
    4 00000000         ;* Author:  Rasoul Keshavarzi 
    5 00000000         ;*------------------------------------------------------
                       ----------------------*
    6 00000000                 THUMB                        ; Declare THUMB ins
                                                            truction set 
    7 00000000                 AREA             My_code, CODE, READONLY ; 
    8 00000000                 EXPORT           __MAIN      ; Label __MAIN is u
                                                            sed externally q
    9 00000000                 ENTRY
   10 00000000         __MAIN
   11 00000000         ; The following operations can be done in simpler method
                       s. They are done in this 
   12 00000000         ; way to practice different memory addressing methods. 
   13 00000000         ; MOV moves into the lower word (16 bits) and clears the
                        upper word
   14 00000000         ; MOVT moves into the upper word
   15 00000000         ; show several ways to create an address using a fixed o
                       ffset and register as offset
   16 00000000         ;   and several examples are used below
   17 00000000         ; NOTE MOV can move ANY 16-bit, and only SOME >16-bit, c
                       onstants into a register
   18 00000000         ; BNE and BEQ can be used to branch on the last operatio
                       n being Not Equal or EQual to zero
   19 00000000         ;
   20 00000000 F44F 4240       MOV              R2, #0xC000 ; move 0xC000 into 
                                                            R2
   21 00000004 F04F 0400       MOV              R4, #0x0    ; init R4 register 
                                                            to 0 to build addre
                                                            ss
   22 00000008 F2C2 0409       MOVT             R4, #0x2009 ; assign 0x20090000
                                                             into R4
   23 0000000C 4414            ADD              R4, R4, R2  ; add 0xC000 to R4 
                                                            to get 0x2009C000 
   24 0000000E         
   25 0000000E F04F 037C       MOV              R3, #0x0000007C ; move initial 
                                                            value for port P2 i
                                                            nto R3 
   26 00000012 6423            STR              R3, [R4, #0x40] ; Turn off five
                                                             LEDs on port 2 
   27 00000014         
   28 00000014 F04F 4330       MOV              R3, #0xB0000000 ; move initial 
                                                            value for port P1 i
                                                            nto R3
   29 00000018 6223            STR              R3, [R4, #0x20] ; Turn off thre
                                                            e LEDs on Port 1 us
                                                            ing an offset
   30 0000001A         
   31 0000001A F04F 0220       MOV              R2, #0x20   ; put Port 1 offset
                                                             into R2 for user l
                                                            ater
   32 0000001E         
   33 0000001E F642 402A       MOV              R0, #0x2C2A
   34 00000022 F2C0 000A       MOVT             R0, #0x000A ; Initialize R0 low
                                                            er word for countdo



ARM Macro Assembler    Page 2 


                                                            wn for 0.5 sec 
   35 00000026         
   36 00000026         loop                                 ; label for loop
   37 00000026 3801            SUBS             R0, #1      ; Decrement r0 and 
                                                            set the N,Z,C statu
                                                            s bits
   38 00000028 D1FD            BNE              loop        ; if the zero statu
                                                            s flag is not set, 
                                                            then return to loop
                                                            
   39 0000002A         
   40 0000002A F083 5380       EOR              R3, R3, #0x10000000 ; flip the 
                                                            28th bit using excl
                                                            usive or
   41 0000002E F642 402A       MOV              R0, #0x2C2A ; Reinitialize R0 f
                                                            or half second coun
                                                            tdown
   42 00000032 F2C0 000A       MOVT             R0, #0x000A ; Reinitialize R0 f
                                                            or half second coun
                                                            tdown
   43 00000036 50A3            STR              R3, [R4, R2] ; write R3 port 1 
                                                            using the address s
                                                            tored in R4 and the
                                                             offset set in R2
   44 00000038         
   45 00000038 E7F5            B                loop        ; This branch needs
                                                             to be fixed!
   46 0000003A         
   47 0000003A         ; the hand assemble code for ADD R4, R4, R2
   48 0000003A         ; is 1110 00 0 0100 0 00100 00100 00010
   49 0000003A         ; the condition code will be always execute which is 111
                       0
   50 0000003A         ; the ISA bits are always left empty for ARM instruction
                       
   51 0000003A         ; the I bit is set to 0 since we are using register valu
                       e rather than immiediate values
   52 0000003A         ; the Opcode bits represent the instruction ADD which is
                        0100
   53 0000003A         ; the set flag bit is 0 since ADD does not update the fl
                       ags
   54 0000003A         ; the first operand "Rn" which is R4 represents 00100
   55 0000003A         ; the destination register "Rd" which is also R4 represe
                       nts 00100
   56 0000003A         ; the operand 2 is R2 which represents 00010
   57 0000003A         
   58 0000003A                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\lab_1_program.d -o.\objects\lab_1_program.o -I.\RTE\_LCP
1768_FLASH -IC:\keil_v5\Arm\Pack\Keil\LPC1700_DFP\2.6.0\Device\Include -IC:\Kei
l_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSI
ON SETA 529" --predefine="LPC175x_6x SETA 1" --list=.\listings\lab_1_program.ls
t Lab_1_program.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

My_code 00000000

Symbol: My_code
   Definitions
      At line 7 in file Lab_1_program.s
   Uses
      None
Comment: My_code unused
__MAIN 00000000

Symbol: __MAIN
   Definitions
      At line 10 in file Lab_1_program.s
   Uses
      At line 8 in file Lab_1_program.s
Comment: __MAIN used once
loop 00000026

Symbol: loop
   Definitions
      At line 36 in file Lab_1_program.s
   Uses
      At line 38 in file Lab_1_program.s
      At line 45 in file Lab_1_program.s

3 symbols
336 symbols in table
