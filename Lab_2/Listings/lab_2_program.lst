


ARM Macro Assembler    Page 1 


    1 00000000         ;*------------------------------------------------------
                       ----------------------
    2 00000000         ;* Name:    Lab_2_program.s 
    3 00000000         ;* Purpose: This code template is for Lab 2
    4 00000000         ;* Author: Eric Praetzel and Rasoul Keshavarzi 
    5 00000000         ;*------------------------------------------------------
                       ----------------------*/
    6 00000000                 THUMB                        ; Declare THUMB ins
                                                            truction set 
    7 00000000                 AREA             My_code, CODE, READONLY ; 
    8 00000000                 EXPORT           __MAIN      ; Label __MAIN is u
                                                            sed externally q
    9 00000000                 ENTRY
   10 00000000         __MAIN
   11 00000000         ; The following lines are similar to Lab-1 but use an ad
                       dress, in r4, to make it easier.
   12 00000000         ; Note that one still needs to use the offsets of 0x20 a
                       nd 0x40 to access the ports
   13 00000000         ;
   14 00000000         ; Turn off all LEDs 
   15 00000000 F44F 4240       MOV              R2, #0xC000
   16 00000004 F04F 4330       MOV              R3, #0xB0000000
   17 00000008 F04F 0400       MOV              R4, #0x0
   18 0000000C F2C2 0409       MOVT             R4, #0x2009
   19 00000010 4414            ADD              R4, R4, R2  ; 0x2009C000 - the 
                                                            base address for de
                                                            aling with the port
                                                            s
   20 00000012 6223            STR              R3, [R4, #0x20] ; Turn off the 
                                                            three LEDs on port 
                                                            1
   21 00000014 F04F 037C       MOV              R3, #0x0000007C
   22 00000018 6423            STR              R3, [R4, #0x40] ; Turn off five
                                                             LEDs on port 2 
   23 0000001A         
   24 0000001A         ResetLUT
   25 0000001A 4D31            LDR              R5, =InputLUT ; assign R5 to th
                                                            e address at label 
                                                            LUT
   26 0000001C         
   27 0000001C         ; Start processing the characters
   28 0000001C         
   29 0000001C         NextChar
   30 0000001C 7828            LDRB             R0, [R5]    ; Read a character 
                                                            to convert to Morse
                                                             Code
   31 0000001E F105 0501       ADD              R5, #1      ; point to next val
                                                            ue for number of de
                                                            lays, jump by 1 byt
                                                            e
   32 00000022 F090 0F00       TEQ              R0, #0      ; If we hit 0 (null
                                                             at end of the stri
                                                            ng) then reset to t
                                                            he start of lookup 
                                                            table
   33 00000026 D104            BNE              ProcessChar ; If we have a char
                                                            acter process it
   34 00000028         
   35 00000028 F04F 0004       MOV              R0, #4      ; delay 4 extra spa



ARM Macro Assembler    Page 2 


                                                            ces (7 total) betwe
                                                            en words
   36 0000002C F000 F831       BL               DELAY
   37 00000030 D0F3            BEQ              ResetLUT
   38 00000032         
   39 00000032         ProcessChar
   40 00000032 F000 F81A       BL               CHAR2MORSE  ; convert ASCII to 
                                                            Morse pattern in R1
                                                             
   41 00000036 FAB6 FB86       CLZ              R11, R6
   42 0000003A FA06 F60B       LSL              R6, R11
   43 0000003E         
   44 0000003E         light_loop
   45 0000003E 0076            LSLS             R6, #0x1
   46 00000040 D20D            BCS              LED_ON_BRANCH ; turn on if the 
                                                            carry is set
   47 00000042 D30F            BCC              LED_OFF_BRANCH ; turn off if th
                                                            e carry out bit is 
                                                            not set
   48 00000044         
   49 00000044         delay_check
   50 00000044 F04F 0001       MOV              R0, #1
   51 00000048 F000 F823       BL               DELAY
   52 0000004C 2E00            CMP              R6, #0
   53 0000004E D1F6            BNE              light_loop
   54 00000050 F000 F81A       BL               LED_OFF
   55 00000054 F04F 0003       MOV              R0, #3
   56 00000058 F000 F81B       BL               DELAY
   57 0000005C E7DE            B                NextChar
   58 0000005E         
   59 0000005E         LED_ON_BRANCH
   60 0000005E F000 F80E       BL               LED_ON
   61 00000062 E7EF            B                delay_check
   62 00000064         
   63 00000064         LED_OFF_BRANCH
   64 00000064 F000 F810       BL               LED_OFF
   65 00000068 E7EC            B                delay_check
   66 0000006A         
   67 0000006A         
   68 0000006A         
   69 0000006A         ;*******************************************************
                       ********************************************************
                       **********************************
   70 0000006A         ;*****************  These are alternate methods to read 
                       the bits in the Morse code LUT. You can use them or not 
                       **********************************
   71 0000006A         ;*******************************************************
                       ********************************************************
                       ********************************** 
   72 0000006A         
   73 0000006A         ; This is a different way to read the bits in the Morse 
                       Code LUT than is in the lab manual.
   74 0000006A         ;  Choose whichever one you like.
   75 0000006A         ; 
   76 0000006A         ; First - loop until we have a 1 bit to send  (no code p
                       rovided)
   77 0000006A         ;
   78 0000006A         ; This is confusing as we're shifting a 32-bit value lef
                       t, but the data is ONLY in the lowest 16 bits, so test s



ARM Macro Assembler    Page 3 


                       tarting at bit 15 for 1 or 0
   79 0000006A         ; Then loop thru all of the data bits:
   80 0000006A         ;
   81 0000006A         ;  MOV  R6, #0x8000 ; Init R6 with the value for the bit
                       , 15th, which we wish to test
   82 0000006A         ;  LSL  R1, R1, #1 ; shift R1 left by 1, store in R1
   83 0000006A         ;  ANDS  R7, R1, R6 ; R7 gets R1 AND R6, Zero bit gets s
                       et telling us if the bit is 0 or 1
   84 0000006A         ;  BEQ  ; branch somewhere it's zero
   85 0000006A         ;  BNE  ; branch somewhere - it's not zero
   86 0000006A         ;
   87 0000006A         ;  ....  lots of code
   88 0000006A         ;  B   somewhere in your code!  ; This is the end of the
                        main program 
   89 0000006A         ;
   90 0000006A         ; Alternate Method #2
   91 0000006A         ; Shifting the data left - makes you walk thru it to the
                        right.  You may find this confusing!
   92 0000006A         ; Instead of shifting data - shift the masking pattern. 
                        Consider this and you may find that
   93 0000006A         ;   there is a much easier way to detect that all data h
                       as been dealt with.
   94 0000006A         ;
   95 0000006A         ;  LSR  R6, #1  ; shift the mask 1 bit to the right
   96 0000006A         ;  ANDS  R7, R1, R6 ; R7 gets R1 AND R6, Zero bit gets s
                       et telling us if the bit is 0 or 1
   97 0000006A         ;
   98 0000006A         ;
   99 0000006A         ; Alternate Method #3
  100 0000006A         ; All of the above methods do not use the shift operatio
                       n properly.
  101 0000006A         ; In the shift operation the bit which is being lost, or
                        pushed off of the register,
  102 0000006A         ; "falls" into the C flag - then one can BCC (Branch Car
                       ry Clear) or BCS (Branch Carry Set)
  103 0000006A         ; This method works very well when coupled with an instr
                       uction which counts the number 
  104 0000006A         ;  of leading zeros (CLZ) and a shift left operation to 
                       remove those leading zeros.
  105 0000006A         
  106 0000006A         ;*******************************************************
                       ********************************************************
                       **********************************
  107 0000006A         ;
  108 0000006A         ;
  109 0000006A         ; Subroutines
  110 0000006A         ;
  111 0000006A         ;   convert ASCII character to Morse pattern
  112 0000006A         ;   pass ASCII character in R0, output in R1
  113 0000006A         ;   index into MorseLuT must be by steps of 2 bytes
  114 0000006A B500    CHAR2MORSE
                               STMFD            R13!,{R14}  ; push Link Registe
                                                            r (return address) 
                                                            on stack
  115 0000006C         ;
  116 0000006C         ;... add code here to convert the ASCII to an index (sub
                       tract 41) and lookup the Morse patter in the Lookup Tabl
                       e
  117 0000006C F1A0 0041       SUB              R0, #0x41



ARM Macro Assembler    Page 4 


  118 00000070 F8DF 8070       LDR              R8, =MorseLUT
  119 00000074 EA4F 0040       LSL              R0,#0x1
  120 00000078 F838 6000       LDRH             R6,[R8,R0]
  121 0000007C         ;
  122 0000007C BD00            LDMFD            R13!,{R15}  ; restore LR to R15
                                                             the Program Counte
                                                            r to return
  123 0000007E         
  124 0000007E         
  125 0000007E         ; Turn the LED on, but deal with the stack in a simpler 
                       way
  126 0000007E         ; NOTE: This method of returning from subroutine (BX  LR
                       ) does NOT work if subroutines are nested!!
  127 0000007E         ;
  128 0000007E B508    LED_ON  STMFD            R13!,{R3, R14}
  129 00000080 F04F 4320       MOV              R3, #0xA0000000 
                                                            ; flip the 28th bit
                                                            
  130 00000084 6223            STR              R3, [R4, #0x20]
  131 00000086 BD08            LDMFD            R13!,{R3, R15}
  132 00000088         
  133 00000088         ; Turn the LED off, but deal with the stack in the prope
                       r way
  134 00000088         ; the Link register gets pushed onto the stack so that s
                       ubroutines can be nested
  135 00000088         ;
  136 00000088 B508    LED_OFF STMFD            R13!,{R3, R14} ; preserve R3 an
                                                            d R4 on the R13 sta
                                                            ck
  137 0000008A F04F 4330       MOV              R3, #0xB0000000 
                                                            ; flip the 28th bit
                                                            
  138 0000008E 6223            STR              R3, [R4, #0x20]
  139 00000090 BD08            LDMFD            R13!,{R3, R15}
  140 00000092         
  141 00000092         ; Delay 500ms * R0 times
  142 00000092         ; Use the delay loop from Lab-1 but loop R0 times around
                       
  143 00000092         ;
  144 00000092         DELAY
  145 00000092 F642 472A       MOV              R7, #0x2C2A
  146 00000096 F2C0 070A       MOVT             R7, #0x000A ; Initialize R0 low
                                                            er word for countdo
                                                            wn for 0.5 sec 
  147 0000009A         
  148 0000009A         loop
  149 0000009A 3F01            SUBS             R7, #1      ; Decrement r0 and 
                                                            set the N,Z,C statu
                                                            s bits
  150 0000009C D1FD            BNE              loop
  151 0000009E         
  152 0000009E         MultipleDelay
  153 0000009E 3801            SUBS             R0, #1
  154 000000A0 D1F7            BNE              DELAY
  155 000000A2         
  156 000000A2         exitDelay
  157 000000A2 4770            BX               LR
  158 000000A4         
  159 000000A4         ;



ARM Macro Assembler    Page 5 


  160 000000A4         ; Data used in the program
  161 000000A4         ; DCB is Define Constant Byte size
  162 000000A4         ; DCW is Define Constant Word (16-bit) size
  163 000000A4         ; EQU is EQUate or assign a value.  This takes no memory
                        but instead of typing the same address in many places o
                       ne can just use an EQU
  164 000000A4         ;
  165 000000A4                 ALIGN                        ; make sure things 
                                                            fall on word addres
                                                            ses
  166 000000A4         
  167 000000A4         ; One way to provide a data to convert to Morse code is 
                       to use a string in memory.
  168 000000A4         ; Simply read bytes of the string until the NULL or "0" 
                       is hit.  This makes it very easy to loop until done.
  169 000000A4         ;
  170 000000A4 41 4B 44 
              43 47 00 InputLUT
                               DCB              "AKDCG", 0  ; strings must be s
                                                            tored, and read, as
                                                             BYTES
  171 000000AA         
  172 000000AA 00 00           ALIGN                        ; make sure things 
                                                            fall on word addres
                                                            ses
  173 000000AC         MorseLUT
  174 000000AC 17 00 D5 
              01 5D 07 
              75 00            DCW              0x17, 0x1D5, 0x75D, 0x75 
                                                            ; A, B, C, D
  175 000000B4 01 00 5D 
              01 DD 01 
              55 00            DCW              0x1, 0x15D, 0x1DD, 0x55 
                                                            ; E, F, G, H
  176 000000BC 05 00 77 
              17 D7 01 
              75 01            DCW              0x5, 0x1777, 0x1D7, 0x175 
                                                            ; I, J, K, L
  177 000000C4 77 00 1D 
              00 77 07 
              DD 05            DCW              0x77, 0x1D, 0x777, 0x5DD 
                                                            ; M, N, O, P
  178 000000CC D7 1D 5D 
              00 15 00 
              07 00            DCW              0x1DD7, 0x5D, 0x15, 0x7 
                                                            ; Q, R, S, T
  179 000000D4 57 00 57 
              01 77 01 
              57 07            DCW              0x57, 0x157, 0x177, 0x757 
                                                            ; U, V, W, X
  180 000000DC 77 1D 75 
              07               DCW              0x1D77, 0x775 ; Y, Z
  181 000000E0         
  182 000000E0         ; One can also define an address using the EQUate direct
                       ive
  183 000000E0         ;
  184 000000E0 2009C000 
                       LED_PORT_ADR
                               EQU              0x2009c000  ; Base address of t



ARM Macro Assembler    Page 6 


                                                            he memory that cont
                                                            rols I/O like LEDs
  185 000000E0         
  186 000000E0                 END
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\lab_2_program.d -o.\objects\lab_2_program.o -I.\RTE\_LPC
1768_FLASH -IC:\keil_v5\Arm\Pack\Keil\LPC1700_DFP\2.6.0\Device\Include -IC:\Kei
l_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSI
ON SETA 529" --predefine="LPC175x_6x SETA 1" --list=.\listings\lab_2_program.ls
t Lab_2_program.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CHAR2MORSE 0000006A

Symbol: CHAR2MORSE
   Definitions
      At line 114 in file Lab_2_program.s
   Uses
      At line 40 in file Lab_2_program.s
Comment: CHAR2MORSE used once
DELAY 00000092

Symbol: DELAY
   Definitions
      At line 144 in file Lab_2_program.s
   Uses
      At line 36 in file Lab_2_program.s
      At line 51 in file Lab_2_program.s
      At line 56 in file Lab_2_program.s
      At line 154 in file Lab_2_program.s

InputLUT 000000A4

Symbol: InputLUT
   Definitions
      At line 170 in file Lab_2_program.s
   Uses
      At line 25 in file Lab_2_program.s
Comment: InputLUT used once
LED_OFF 00000088

Symbol: LED_OFF
   Definitions
      At line 136 in file Lab_2_program.s
   Uses
      At line 54 in file Lab_2_program.s
      At line 64 in file Lab_2_program.s

LED_OFF_BRANCH 00000064

Symbol: LED_OFF_BRANCH
   Definitions
      At line 63 in file Lab_2_program.s
   Uses
      At line 47 in file Lab_2_program.s
Comment: LED_OFF_BRANCH used once
LED_ON 0000007E

Symbol: LED_ON
   Definitions
      At line 128 in file Lab_2_program.s
   Uses
      At line 60 in file Lab_2_program.s
Comment: LED_ON used once
LED_ON_BRANCH 0000005E

Symbol: LED_ON_BRANCH
   Definitions
      At line 59 in file Lab_2_program.s
   Uses
      At line 46 in file Lab_2_program.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: LED_ON_BRANCH used once
MorseLUT 000000AC

Symbol: MorseLUT
   Definitions
      At line 173 in file Lab_2_program.s
   Uses
      At line 118 in file Lab_2_program.s
Comment: MorseLUT used once
MultipleDelay 0000009E

Symbol: MultipleDelay
   Definitions
      At line 152 in file Lab_2_program.s
   Uses
      None
Comment: MultipleDelay unused
My_code 00000000

Symbol: My_code
   Definitions
      At line 7 in file Lab_2_program.s
   Uses
      None
Comment: My_code unused
NextChar 0000001C

Symbol: NextChar
   Definitions
      At line 29 in file Lab_2_program.s
   Uses
      At line 57 in file Lab_2_program.s
Comment: NextChar used once
ProcessChar 00000032

Symbol: ProcessChar
   Definitions
      At line 39 in file Lab_2_program.s
   Uses
      At line 33 in file Lab_2_program.s
Comment: ProcessChar used once
ResetLUT 0000001A

Symbol: ResetLUT
   Definitions
      At line 24 in file Lab_2_program.s
   Uses
      At line 37 in file Lab_2_program.s
Comment: ResetLUT used once
__MAIN 00000000

Symbol: __MAIN
   Definitions
      At line 10 in file Lab_2_program.s
   Uses
      At line 8 in file Lab_2_program.s
Comment: __MAIN used once
delay_check 00000044




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: delay_check
   Definitions
      At line 49 in file Lab_2_program.s
   Uses
      At line 61 in file Lab_2_program.s
      At line 65 in file Lab_2_program.s

exitDelay 000000A2

Symbol: exitDelay
   Definitions
      At line 156 in file Lab_2_program.s
   Uses
      None
Comment: exitDelay unused
light_loop 0000003E

Symbol: light_loop
   Definitions
      At line 44 in file Lab_2_program.s
   Uses
      At line 53 in file Lab_2_program.s
Comment: light_loop used once
loop 0000009A

Symbol: loop
   Definitions
      At line 148 in file Lab_2_program.s
   Uses
      At line 150 in file Lab_2_program.s
Comment: loop used once
18 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

LED_PORT_ADR 2009C000

Symbol: LED_PORT_ADR
   Definitions
      At line 184 in file Lab_2_program.s
   Uses
      None
Comment: LED_PORT_ADR unused
1 symbol
354 symbols in table
